'''
Ce fichier cr√©e une UI web compl√®te en local ou sur n'importe quel h√©bergement Streamlit :

Il affiche :
üéûÔ∏è Le GIF prediction_live.gif

üîç L‚Äôimage SHAP en temps r√©el shap_live_frame.png

üìä La table des pr√©dictions ns020_predictions.csv

‚ö†Ô∏è Les alertes de alerts_detected.json (si elles existent)
pip install streamlit
streamlit run streamlit_app.py

Auteur : Kocupyr Romain
Dev    : multi_gpt_api
Licence : CC BY-NC-SA 4.0
'''

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import json
import os
from PIL import Image

st.set_page_config(layout="wide", page_title="NeuroSolve Streamlit UI")

# === TITRE
st.title("üß† NeuroSolve ‚Äì Streamlit Web Dashboard")
st.subheader("EEG NP Solver ‚Ä¢ XAI Live ‚Ä¢ Alert Monitoring")

# === FICHIERS REQUIS
json_path = "predictions_log.json"
gif_path = "prediction_live.gif"
shap_img = "shap_live_frame.png"
alert_path = "alerts_detected.json"
csv_path = "ns020_predictions.csv"

# === COLONNES
col1, col2 = st.columns([1, 2])

# === LIVE GIF EEG
with col1:
    st.markdown("### üéûÔ∏è EEG Timeline (Live Prediction)")
    if os.path.exists(gif_path):
        st.image(gif_path)
    else:
        st.warning("GIF non trouv√© : `prediction_live.gif`")

# === SHAP VISU
with col2:
    st.markdown("### üîç SHAP ‚Äì Interpr√©tation en direct")
    if os.path.exists(shap_img):
        st.image(shap_img)
    else:
        st.warning("Image SHAP non trouv√©e : `shap_live_frame.png`")

# === PREDICTION TABLE
st.markdown("### üìä Pr√©dictions EEG (log complet)")

if os.path.exists(csv_path):
    df = pd.read_csv(csv_path)
    st.dataframe(df.tail(10), use_container_width=True)
else:
    st.warning("Fichier `ns020_predictions.csv` introuvable.")

# === ALERTS
st.markdown("### ‚ö†Ô∏è Alertes cognitives d√©clench√©es")

if os.path.exists(alert_path):
    with open(alert_path) as f:
        alerts = json.load(f)
    for alert in alerts:
        st.error(f"‚ö†Ô∏è Sujet : {alert['frames']} ‚Äî Proba Moyenne : {alert['mean_prob']} ‚Äî Dur√©e : {alert['duration']}s")
else:
    st.info("Aucune alerte d√©tect√©e ou fichier `alerts_detected.json` manquant.")

# === FOOTER
st.markdown("---")
st.markdown("Made with ‚ù§Ô∏è by **Kocupyr Romain** & multi_gpt_api")
st.markdown("[GitHub NeuroSolve](https://github.com/RoaminS/NeuroSolve)")
